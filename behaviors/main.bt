{
    "1": {
        "id": 1,
        "class": "Sequence",
        "name": "",
        "asset-pack": "core",
        "children": [
            40,
            253
        ],
        "decorators": [],
        "options": {}
    },
    "12": {
        "id": 12,
        "class": "Listen",
        "name": "Parse Commands",
        "asset-pack": "core",
        "parent": 253,
        "options": {
            "getOptions": [
                "() => {",
                "    let options = {",
                "        heyJibo: false,",
                "        detectEnd: true,",
                "        incremental: false,",
                "        authenticateSpeaker: ''",
                "    }",
                "    return options;",
                "}"
            ],
            "rule": "lighting.rule",
            "onResult": [
                "(listener) => {",
                "  listener.on('cloud', function(asrResult, speakerIds) {",
                "    // Capture the result, if one is detected.",
                "    if(asrResult && asrResult.NLParse) {",
                "      // Re-initialize the results each time.",
                "      notepad.action = '';",
                "      notepad.params = {};",
                "      ",
                "      // Attempt to parse a base command.",
                "      if (asrResult.NLParse.action) notepad.action = asrResult.NLParse.action;",
                "      if (asrResult.NLParse.room) notepad.params.room = asrResult.NLParse.room;",
                "      if (asrResult.NLParse.schedule) notepad.params.time = asrResult.NLParse.schedule;",
                "      ",
                "      // As long as an action was parsed, invoke it.",
                "      if(notepad.action != '') {",
                "        blackboard.LightingController.takeAction(notepad.action, notepad.params);",
                "      }",
                "      else {",
                "        // Answer to a yes/no question.",
                "        if(asrResult.NLParse.confirm === 'yes') {",
                "          blackboard.LightingController.confirmAction();",
                "        }",
                "        else if(asrResult.NLParse.confirm === 'no') {",
                "          blackboard.LightingController.cancelAction();",
                "        }",
                "      }",
                "    }",
                "  });",
                "}"
            ]
        }
    },
    "40": {
        "id": 40,
        "class": "ExecuteScript",
        "name": "Setup Philips Hue connectivity error handlers",
        "asset-pack": "core",
        "parent": 1,
        "options": {
            "exec": [
                "() => {",
                "  // Setup the events.",
                "  blackboard.LightingController.configureEvents();",
                "  ",
                "  // Jibo speaks to the user.",
                "  blackboard.Emitter.on('userMessage', function(message){",
                "    jibo.tts.speak(message);",
                "  });",
                "  ",
                "  // Jibo acknowledges requests from the user.",
                "  blackboard.Emitter.on('acknowledgeRequest', function(message){",
                "    // Play the acknowledgment animation.",
                "    let animation = jibo.bt.behaviors.PlayAnimation('acknowledgment', 'greeting.keys');",
                "    if(animation.start()) {",
                "      setInterval(function() {",
                "        animation.update();",
                "      }, 33);",
                "    }",
                "  });",
                "  ",
                "  // Attempt to connect to the Hue bridge.",
                "  blackboard.LightingController.setupHueApi();",
                "}"
            ]
        }
    },
    "253": {
        "id": 253,
        "class": "Sequence",
        "name": "",
        "asset-pack": "core",
        "parent": 1,
        "decorators": [
            255
        ],
        "children": [
            12
        ],
        "options": {}
    },
    "255": {
        "id": 255,
        "class": "WhileCondition",
        "name": "",
        "asset-pack": "core",
        "options": {
            "init": [
                "() => {",
                "}"
            ],
            "conditional": [
                "() => {",
                "    return true;",
                "}"
            ]
        }
    },
    "meta": {
        "version": 1
    }
}